<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:fb="http://www.facebook.com/2008/fbml">



	<!-- end of header bar -->
	<ui:define name="body">

		<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->
		<center>
			<fieldset style="width: 610px; height: 320px;">
				<fb:login-button ></fb:login-button>
				<br />
				<br />

				<h:form id="frm">
					<h:panelGrid columns="2" border="0" cellpadding="4" cellspacing="4">
					
						<h:inputHidden id="email"  value="#{socialLogin.gmailId}" />
						
						<br />

					</h:panelGrid>

					<h:commandLink id="login" value="Login"
						action="#{socialLogin.verifyCustomersLogin}" />
				</h:form>

				<!-- 	<h:form id="frm">
			<h:panelGrid columns="2">
		   <h:outputLabel for="id" value="ID : "/>
				<h:inputText id="id" value="#{socialLogin.id}" />
				<h:outputLabel for="name" value="Name : "/>
				<h:inputText id="name" value="#{socialLogin.name}" />
				<h:outputLabel for="firstName" value="First Name : "/>
				<h:inputText id="firstName" value="#{socialLogin.firstName}" />
				<h:outputLabel for="lastName" value="Last Name : "/>
				<h:inputText id="lastName" value="#{socialLogin.lastName}" />
				<h:outputLabel for="link" value="Link : "/>
				<h:inputText id="link" value="#{socialLogin.link}" />
				<h:outputLabel for="userName" value="User Name : "/>
				<h:inputText id="userName" value="#{socialLogin.userName}" />	
				
				<h:outputLabel for="email" value="Mail ID : "/>
				<h:inputText id="email" value="#{socialLogin.email}" />
		

			</h:panelGrid>
			<h:commandLink id="login" value="Login" action="#{socialLogin.display}"  />
		</h:form> -->
			</fieldset>
		</center>

		<div id="fb-root"></div>
		<script>
		  window.fbAsyncInit = function() {
		  FB.init({
		    appId      : '234943440001544',
		    status     : true, // check login status
		    cookie     : true, // enable cookies to allow the server to access the session
		    xfbml      : true  // parse XFBML
		  });
		
		  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
		  // for any authentication related change, such as login, logout or session refresh. This means that
		  // whenever someone who was previously logged out tries to log in again, the correct case below 
		  // will be handled. 
		  FB.Event.subscribe('auth.authResponseChange', function(response) {
		    // Here we specify what we do with the response anytime this event occurs. 
		    if (response.status === 'connected') {
		
		            FB.api('/me', function(response) {
					  var email=response.email;
		                document.getElementById("frm:email").value=email;
		                
		              var i=0;
		              for (var key in response) {
		              
		                i++;
		
		                switch(i){
		                case 1: document.getElementById("frm:id").value=response[key]; break;
		                case 2: document.getElementById("frm:name").value=response[key]; break;
		                case 3: document.getElementById("frm:firstName").value=response[key]; break;
		                case 4: document.getElementById("frm:lastName").value=response[key]; break;
		                case 5: document.getElementById("frm:link").value=response[key]; break;
		                case 6: document.getElementById("frm:userName").value=response[key]; break;
		               }  
		                
		              }
		
		            });
		
		      // The response object is returned with a status field that lets the app know the current
		      // login status of the person. In this case, we're handling the situation where they 
		      // have logged in to the app.
		      testAPI();
		    } else if (response.status === 'not_authorized') {
		      // In this case, the person is logged into Facebook, but not into the app, so we call
		      // FB.login() to prompt them to do so. 
		      // In real-life usage, you wouldn't want to immediately prompt someone to login 
		      // like this, for two reasons:
		      // (1) JavaScript created popup windows are blocked by most browsers unless they 
		      // result from direct interaction from people using the app (such as a mouse click)
		      // (2) it is a bad experience to be continually prompted to login upon page load.
		      FB.login();
		    } else {
		      // In this case, the person is not logged into Facebook, so we call the login() 
		      // function to prompt them to do so. Note that at this stage there is no indication
		      // of whether they are logged into the app. If they aren't then they'll see the Login
		      // dialog right after they log in to Facebook. 
		      // The same caveats as above apply to the FB.login() call here.
		      FB.login();
		    }
		  });
		  };
		
		  // Load the SDK asynchronously
		  (function(d){
		   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
		   if (d.getElementById(id)) {return;}
		   js = d.createElement('script'); js.id = id; js.async = true;
		   js.src = "//connect.facebook.net/en_US/all.js";
		   ref.parentNode.insertBefore(js, ref);
		  }(document));
		
		  // Here we run a very simple test of the Graph API after login is successful. 
		  // This testAPI() function is only called in those cases. 
		  function testAPI() {
		    console.log('Welcome!  Fetching your information.... ');
		    FB.api('/me', function(response) {
		      console.log('Good to see you, ' + response.name + '.');
		    });
		  }
		</script>

	</ui:define>
</ui:composition>
